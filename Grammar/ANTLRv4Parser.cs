//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv4Parser.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class ANTLRv4Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TOKEN_REF=1, RULE_REF=2, LEXER_CHAR_SET=3, DOC_COMMENT=4, BLOCK_COMMENT=5, 
		LINE_COMMENT=6, INT=7, STRING_LITERAL=8, UNTERMINATED_STRING_LITERAL=9, 
		BEGIN_ARGUMENT=10, BEGIN_ACTION=11, OPTIONS=12, TOKENS=13, CHANNELS=14, 
		IMPORT=15, FRAGMENT=16, LEXER=17, PARSER=18, GRAMMAR=19, PROTECTED=20, 
		PUBLIC=21, PRIVATE=22, RETURNS=23, LOCALS=24, THROWS=25, CATCH=26, FINALLY=27, 
		MODE=28, COLON=29, COLONCOLON=30, COMMA=31, SEMI=32, LPAREN=33, RPAREN=34, 
		LBRACE=35, RBRACE=36, RARROW=37, LT=38, GT=39, ASSIGN=40, QUESTION=41, 
		STAR=42, PLUS_ASSIGN=43, PLUS=44, OR=45, DOLLAR=46, RANGE=47, DOT=48, 
		AT=49, POUND=50, NOT=51, ID=52, WS=53, ERRCHAR=54, END_ARGUMENT=55, UNTERMINATED_ARGUMENT=56, 
		ARGUMENT_CONTENT=57, END_ACTION=58, UNTERMINATED_ACTION=59, ACTION_CONTENT=60, 
		UNTERMINATED_CHAR_SET=61;
	public const int
		RULE_grammarSpec = 0, RULE_grammarType = 1, RULE_prequelConstruct = 2, 
		RULE_optionsSpec = 3, RULE_option = 4, RULE_optionValue = 5, RULE_delegateGrammars = 6, 
		RULE_delegateGrammar = 7, RULE_tokensSpec = 8, RULE_channelsSpec = 9, 
		RULE_idList = 10, RULE_action = 11, RULE_actionScopeName = 12, RULE_actionBlock = 13, 
		RULE_argActionBlock = 14, RULE_modeSpec = 15, RULE_rules = 16, RULE_ruleSpec = 17, 
		RULE_parserRuleSpec = 18, RULE_exceptionGroup = 19, RULE_exceptionHandler = 20, 
		RULE_finallyClause = 21, RULE_rulePrequel = 22, RULE_ruleReturns = 23, 
		RULE_throwsSpec = 24, RULE_localsSpec = 25, RULE_ruleAction = 26, RULE_ruleModifiers = 27, 
		RULE_ruleModifier = 28, RULE_ruleBlock = 29, RULE_ruleAltList = 30, RULE_labeledAlt = 31, 
		RULE_lexerRuleSpec = 32, RULE_lexerRuleBlock = 33, RULE_lexerAltList = 34, 
		RULE_lexerAlt = 35, RULE_lexerElements = 36, RULE_lexerElement = 37, RULE_labeledLexerElement = 38, 
		RULE_lexerBlock = 39, RULE_lexerCommands = 40, RULE_lexerCommand = 41, 
		RULE_lexerCommandName = 42, RULE_lexerCommandExpr = 43, RULE_altList = 44, 
		RULE_alternative = 45, RULE_element = 46, RULE_labeledElement = 47, RULE_ebnf = 48, 
		RULE_blockSuffix = 49, RULE_ebnfSuffix = 50, RULE_lexerAtom = 51, RULE_atom = 52, 
		RULE_notSet = 53, RULE_blockSet = 54, RULE_setElement = 55, RULE_block = 56, 
		RULE_ruleref = 57, RULE_range = 58, RULE_terminal = 59, RULE_elementOptions = 60, 
		RULE_elementOption = 61, RULE_id = 62;
	public static readonly string[] ruleNames = {
		"grammarSpec", "grammarType", "prequelConstruct", "optionsSpec", "option", 
		"optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec", "channelsSpec", 
		"idList", "action", "actionScopeName", "actionBlock", "argActionBlock", 
		"modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup", "exceptionHandler", 
		"finallyClause", "rulePrequel", "ruleReturns", "throwsSpec", "localsSpec", 
		"ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock", "ruleAltList", 
		"labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList", "lexerAlt", 
		"lexerElements", "lexerElement", "labeledLexerElement", "lexerBlock", 
		"lexerCommands", "lexerCommand", "lexerCommandName", "lexerCommandExpr", 
		"altList", "alternative", "element", "labeledElement", "ebnf", "blockSuffix", 
		"ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", "setElement", 
		"block", "ruleref", "range", "terminal", "elementOptions", "elementOption", 
		"id"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'options'", "'tokens'", "'channels'", "'import'", "'fragment'", "'lexer'", 
		"'parser'", "'grammar'", "'protected'", "'public'", "'private'", "'returns'", 
		"'locals'", "'throws'", "'catch'", "'finally'", "'mode'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT", 
		"LINE_COMMENT", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL", 
		"BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT", 
		"FRAGMENT", "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE", 
		"RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON", 
		"COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT", 
		"GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR", 
		"RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT", 
		"UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION", 
		"ACTION_CONTENT", "UNTERMINATED_CHAR_SET"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRv4Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static ANTLRv4Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public ANTLRv4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class GrammarSpecContext : ParserRuleContext {
		public GrammarTypeContext grammarType() {
			return GetRuleContext<GrammarTypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ANTLRv4Parser.Eof, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public PrequelConstructContext[] prequelConstruct() {
			return GetRuleContexts<PrequelConstructContext>();
		}
		public PrequelConstructContext prequelConstruct(int i) {
			return GetRuleContext<PrequelConstructContext>(i);
		}
		public ModeSpecContext[] modeSpec() {
			return GetRuleContexts<ModeSpecContext>();
		}
		public ModeSpecContext modeSpec(int i) {
			return GetRuleContext<ModeSpecContext>(i);
		}
		public GrammarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarSpecContext grammarSpec() {
		GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_grammarSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 126; Match(DOC_COMMENT);
				}
			}

			State = 129; grammarType();
			State = 130; id();
			State = 131; Match(SEMI);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0)) {
				{
				{
				State = 132; prequelConstruct();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138; rules();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODE) {
				{
				{
				State = 139; modeSpec();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarTypeContext : ParserRuleContext {
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode GRAMMAR() { return GetToken(ANTLRv4Parser.GRAMMAR, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public GrammarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterGrammarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitGrammarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrammarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrammarTypeContext grammarType() {
		GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_grammarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEXER:
				{
				State = 147; Match(LEXER);
				State = 148; Match(GRAMMAR);
				}
				break;
			case PARSER:
				{
				State = 149; Match(PARSER);
				State = 150; Match(GRAMMAR);
				}
				break;
			case GRAMMAR:
				{
				State = 151; Match(GRAMMAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrequelConstructContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public DelegateGrammarsContext delegateGrammars() {
			return GetRuleContext<DelegateGrammarsContext>(0);
		}
		public TokensSpecContext tokensSpec() {
			return GetRuleContext<TokensSpecContext>(0);
		}
		public ChannelsSpecContext channelsSpec() {
			return GetRuleContext<ChannelsSpecContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public PrequelConstructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prequelConstruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterPrequelConstruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitPrequelConstruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrequelConstruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrequelConstructContext prequelConstruct() {
		PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
		EnterRule(_localctx, 4, RULE_prequelConstruct);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; optionsSpec();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; delegateGrammars();
				}
				break;
			case TOKENS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156; tokensSpec();
				}
				break;
			case CHANNELS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 157; channelsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 158; action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionsSpecContext : ParserRuleContext {
		public ITerminalNode OPTIONS() { return GetToken(ANTLRv4Parser.OPTIONS, 0); }
		public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(ANTLRv4Parser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(ANTLRv4Parser.SEMI, i);
		}
		public OptionsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionsSpecContext optionsSpec() {
		OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_optionsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(OPTIONS);
			State = 162; Match(LBRACE);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOKEN_REF || _la==RULE_REF) {
				{
				{
				State = 163; option();
				State = 164; Match(SEMI);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; id();
			State = 174; Match(ASSIGN);
			State = 175; optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ANTLRv4Parser.DOT, i);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionValue);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177; id();
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 178; Match(DOT);
					State = 179; id();
					}
					}
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; Match(STRING_LITERAL);
				}
				break;
			case BEGIN_ACTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; actionBlock();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarsContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(ANTLRv4Parser.IMPORT, 0); }
		public DelegateGrammarContext[] delegateGrammar() {
			return GetRuleContexts<DelegateGrammarContext>();
		}
		public DelegateGrammarContext delegateGrammar(int i) {
			return GetRuleContext<DelegateGrammarContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarsContext delegateGrammars() {
		DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateGrammars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(IMPORT);
			State = 191; delegateGrammar();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 192; Match(COMMA);
				State = 193; delegateGrammar();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateGrammarContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateGrammar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterDelegateGrammar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitDelegateGrammar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateGrammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateGrammarContext delegateGrammar() {
		DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
		EnterRule(_localctx, 14, RULE_delegateGrammar);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; id();
				State = 202; Match(ASSIGN);
				State = 203; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokensSpecContext : ParserRuleContext {
		public ITerminalNode TOKENS() { return GetToken(ANTLRv4Parser.TOKENS, 0); }
		public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public TokensSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tokensSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTokensSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTokensSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTokensSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokensSpecContext tokensSpec() {
		TokensSpecContext _localctx = new TokensSpecContext(Context, State);
		EnterRule(_localctx, 16, RULE_tokensSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(TOKENS);
			State = 209; Match(LBRACE);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKEN_REF || _la==RULE_REF) {
				{
				State = 210; idList();
				}
			}

			State = 213; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelsSpecContext : ParserRuleContext {
		public ITerminalNode CHANNELS() { return GetToken(ANTLRv4Parser.CHANNELS, 0); }
		public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterChannelsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitChannelsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelsSpecContext channelsSpec() {
		ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_channelsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(CHANNELS);
			State = 216; Match(LBRACE);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOKEN_REF || _la==RULE_REF) {
				{
				State = 217; idList();
				}
			}

			State = 220; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 20, RULE_idList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; id();
			State = 227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 223; Match(COMMA);
					State = 224; id();
					}
					} 
				}
				State = 229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 230; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ActionScopeNameContext actionScopeName() {
			return GetRuleContext<ActionScopeNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(ANTLRv4Parser.COLONCOLON, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(AT);
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 234; actionScopeName();
				State = 235; Match(COLONCOLON);
				}
				break;
			}
			State = 239; id();
			State = 240; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionScopeNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
		public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
		public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionScopeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionScopeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionScopeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionScopeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionScopeNameContext actionScopeName() {
		ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_actionScopeName);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; id();
				}
				break;
			case LEXER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; Match(LEXER);
				}
				break;
			case PARSER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; Match(PARSER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv4Parser.BEGIN_ACTION, 0); }
		public ITerminalNode END_ACTION() { return GetToken(ANTLRv4Parser.END_ACTION, 0); }
		public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv4Parser.ACTION_CONTENT); }
		public ITerminalNode ACTION_CONTENT(int i) {
			return GetToken(ANTLRv4Parser.ACTION_CONTENT, i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_actionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(BEGIN_ACTION);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ACTION_CONTENT) {
				{
				{
				State = 248; Match(ACTION_CONTENT);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254; Match(END_ACTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgActionBlockContext : ParserRuleContext {
		public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv4Parser.BEGIN_ARGUMENT, 0); }
		public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv4Parser.END_ARGUMENT, 0); }
		public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv4Parser.ARGUMENT_CONTENT); }
		public ITerminalNode ARGUMENT_CONTENT(int i) {
			return GetToken(ANTLRv4Parser.ARGUMENT_CONTENT, i);
		}
		public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argActionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterArgActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitArgActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgActionBlockContext argActionBlock() {
		ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_argActionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(BEGIN_ARGUMENT);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ARGUMENT_CONTENT) {
				{
				{
				State = 257; Match(ARGUMENT_CONTENT);
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263; Match(END_ARGUMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModeSpecContext : ParserRuleContext {
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public LexerRuleSpecContext[] lexerRuleSpec() {
			return GetRuleContexts<LexerRuleSpecContext>();
		}
		public LexerRuleSpecContext lexerRuleSpec(int i) {
			return GetRuleContext<LexerRuleSpecContext>(i);
		}
		public ModeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modeSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterModeSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitModeSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModeSpecContext modeSpec() {
		ModeSpecContext _localctx = new ModeSpecContext(Context, State);
		EnterRule(_localctx, 30, RULE_modeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(MODE);
			State = 266; id();
			State = 267; Match(SEMI);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT))) != 0)) {
				{
				{
				State = 268; lexerRuleSpec();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public RuleSpecContext[] ruleSpec() {
			return GetRuleContexts<RuleSpecContext>();
		}
		public RuleSpecContext ruleSpec(int i) {
			return GetRuleContext<RuleSpecContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		RulesContext _localctx = new RulesContext(Context, State);
		EnterRule(_localctx, 32, RULE_rules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				{
				State = 274; ruleSpec();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleSpecContext : ParserRuleContext {
		public ParserRuleSpecContext parserRuleSpec() {
			return GetRuleContext<ParserRuleSpecContext>(0);
		}
		public LexerRuleSpecContext lexerRuleSpec() {
			return GetRuleContext<LexerRuleSpecContext>(0);
		}
		public RuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleSpecContext ruleSpec() {
		RuleSpecContext _localctx = new RuleSpecContext(Context, State);
		EnterRule(_localctx, 34, RULE_ruleSpec);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; parserRuleSpec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; lexerRuleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserRuleSpecContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public RuleBlockContext ruleBlock() {
			return GetRuleContext<RuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ExceptionGroupContext exceptionGroup() {
			return GetRuleContext<ExceptionGroupContext>(0);
		}
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public RuleModifiersContext ruleModifiers() {
			return GetRuleContext<RuleModifiersContext>(0);
		}
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext ruleReturns() {
			return GetRuleContext<RuleReturnsContext>(0);
		}
		public ThrowsSpecContext throwsSpec() {
			return GetRuleContext<ThrowsSpecContext>(0);
		}
		public LocalsSpecContext localsSpec() {
			return GetRuleContext<LocalsSpecContext>(0);
		}
		public RulePrequelContext[] rulePrequel() {
			return GetRuleContexts<RulePrequelContext>();
		}
		public RulePrequelContext rulePrequel(int i) {
			return GetRuleContext<RulePrequelContext>(i);
		}
		public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterParserRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitParserRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParserRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParserRuleSpecContext parserRuleSpec() {
		ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
		EnterRule(_localctx, 36, RULE_parserRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 284; Match(DOC_COMMENT);
				}
			}

			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) {
				{
				State = 287; ruleModifiers();
				}
			}

			State = 290; Match(RULE_REF);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 291; argActionBlock();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 294; ruleReturns();
				}
			}

			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 297; throwsSpec();
				}
			}

			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCALS) {
				{
				State = 300; localsSpec();
				}
			}

			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPTIONS || _la==AT) {
				{
				{
				State = 303; rulePrequel();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309; Match(COLON);
			State = 310; ruleBlock();
			State = 311; Match(SEMI);
			State = 312; exceptionGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionGroupContext : ParserRuleContext {
		public ExceptionHandlerContext[] exceptionHandler() {
			return GetRuleContexts<ExceptionHandlerContext>();
		}
		public ExceptionHandlerContext exceptionHandler(int i) {
			return GetRuleContext<ExceptionHandlerContext>(i);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionGroupContext exceptionGroup() {
		ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
		EnterRule(_localctx, 38, RULE_exceptionGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CATCH) {
				{
				{
				State = 314; exceptionHandler();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINALLY) {
				{
				State = 320; finallyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionHandlerContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(ANTLRv4Parser.CATCH, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionHandler; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterExceptionHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitExceptionHandler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptionHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionHandlerContext exceptionHandler() {
		ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
		EnterRule(_localctx, 40, RULE_exceptionHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(CATCH);
			State = 324; argActionBlock();
			State = 325; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(ANTLRv4Parser.FINALLY, 0); }
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext finallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(FINALLY);
			State = 328; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulePrequelContext : ParserRuleContext {
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext ruleAction() {
			return GetRuleContext<RuleActionContext>(0);
		}
		public RulePrequelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulePrequel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRulePrequel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRulePrequel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRulePrequel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulePrequelContext rulePrequel() {
		RulePrequelContext _localctx = new RulePrequelContext(Context, State);
		EnterRule(_localctx, 44, RULE_rulePrequel);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 330; optionsSpec();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331; ruleAction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleReturnsContext : ParserRuleContext {
		public ITerminalNode RETURNS() { return GetToken(ANTLRv4Parser.RETURNS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public RuleReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleReturns(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleReturns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleReturnsContext ruleReturns() {
		RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
		EnterRule(_localctx, 46, RULE_ruleReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(RETURNS);
			State = 335; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowsSpecContext : ParserRuleContext {
		public ITerminalNode THROWS() { return GetToken(ANTLRv4Parser.THROWS, 0); }
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterThrowsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitThrowsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrowsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThrowsSpecContext throwsSpec() {
		ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
		EnterRule(_localctx, 48, RULE_throwsSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(THROWS);
			State = 338; id();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 339; Match(COMMA);
				State = 340; id();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalsSpecContext : ParserRuleContext {
		public ITerminalNode LOCALS() { return GetToken(ANTLRv4Parser.LOCALS, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public LocalsSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localsSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLocalsSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLocalsSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalsSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalsSpecContext localsSpec() {
		LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
		EnterRule(_localctx, 50, RULE_localsSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(LOCALS);
			State = 347; argActionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleActionContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public RuleActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleActionContext ruleAction() {
		RuleActionContext _localctx = new RuleActionContext(Context, State);
		EnterRule(_localctx, 52, RULE_ruleAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(AT);
			State = 350; id();
			State = 351; actionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifiersContext : ParserRuleContext {
		public RuleModifierContext[] ruleModifier() {
			return GetRuleContexts<RuleModifierContext>();
		}
		public RuleModifierContext ruleModifier(int i) {
			return GetRuleContext<RuleModifierContext>(i);
		}
		public RuleModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifiersContext ruleModifiers() {
		RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
		EnterRule(_localctx, 54, RULE_ruleModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 353; ruleModifier();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleModifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(ANTLRv4Parser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(ANTLRv4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(ANTLRv4Parser.PROTECTED, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public RuleModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleModifierContext ruleModifier() {
		RuleModifierContext _localctx = new RuleModifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_ruleModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleBlockContext : ParserRuleContext {
		public RuleAltListContext ruleAltList() {
			return GetRuleContext<RuleAltListContext>(0);
		}
		public RuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleBlockContext ruleBlock() {
		RuleBlockContext _localctx = new RuleBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_ruleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; ruleAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleAltListContext : ParserRuleContext {
		public LabeledAltContext[] labeledAlt() {
			return GetRuleContexts<LabeledAltContext>();
		}
		public LabeledAltContext labeledAlt(int i) {
			return GetRuleContext<LabeledAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public RuleAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleAltListContext ruleAltList() {
		RuleAltListContext _localctx = new RuleAltListContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; labeledAlt();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 363; Match(OR);
				State = 364; labeledAlt();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledAltContext : ParserRuleContext {
		public AlternativeContext alternative() {
			return GetRuleContext<AlternativeContext>(0);
		}
		public ITerminalNode POUND() { return GetToken(ANTLRv4Parser.POUND, 0); }
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public LabeledAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledAltContext labeledAlt() {
		LabeledAltContext _localctx = new LabeledAltContext(Context, State);
		EnterRule(_localctx, 62, RULE_labeledAlt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; alternative();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POUND) {
				{
				State = 371; Match(POUND);
				State = 372; id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleSpecContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public LexerRuleBlockContext lexerRuleBlock() {
			return GetRuleContext<LexerRuleBlockContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
		public ITerminalNode DOC_COMMENT() { return GetToken(ANTLRv4Parser.DOC_COMMENT, 0); }
		public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
		public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleSpecContext lexerRuleSpec() {
		LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
		EnterRule(_localctx, 64, RULE_lexerRuleSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 375; Match(DOC_COMMENT);
				}
			}

			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FRAGMENT) {
				{
				State = 378; Match(FRAGMENT);
				}
			}

			State = 381; Match(TOKEN_REF);
			State = 382; Match(COLON);
			State = 383; lexerRuleBlock();
			State = 384; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleBlockContext : ParserRuleContext {
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerRuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleBlockContext lexerRuleBlock() {
		LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_lexerRuleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; lexerAltList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltListContext : ParserRuleContext {
		public LexerAltContext[] lexerAlt() {
			return GetRuleContexts<LexerAltContext>();
		}
		public LexerAltContext lexerAlt(int i) {
			return GetRuleContext<LexerAltContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public LexerAltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAltList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltListContext lexerAltList() {
		LexerAltListContext _localctx = new LexerAltListContext(Context, State);
		EnterRule(_localctx, 68, RULE_lexerAltList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; lexerAlt();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 389; Match(OR);
				State = 390; lexerAlt();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAltContext : ParserRuleContext {
		public LexerElementsContext lexerElements() {
			return GetRuleContext<LexerElementsContext>(0);
		}
		public LexerCommandsContext lexerCommands() {
			return GetRuleContext<LexerCommandsContext>(0);
		}
		public LexerAltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAlt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAltContext lexerAlt() {
		LexerAltContext _localctx = new LexerAltContext(Context, State);
		EnterRule(_localctx, 70, RULE_lexerAlt);
		int _la;
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 396; lexerElements();
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 397; lexerCommands();
					}
				}

				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementsContext : ParserRuleContext {
		public LexerElementContext[] lexerElement() {
			return GetRuleContexts<LexerElementContext>();
		}
		public LexerElementContext lexerElement(int i) {
			return GetRuleContext<LexerElementContext>(i);
		}
		public LexerElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementsContext lexerElements() {
		LexerElementsContext _localctx = new LexerElementsContext(Context, State);
		EnterRule(_localctx, 72, RULE_lexerElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 403; lexerElement();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerElementContext : ParserRuleContext {
		public LabeledLexerElementContext labeledLexerElement() {
			return GetRuleContext<LabeledLexerElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public LexerBlockContext lexerBlock() {
			return GetRuleContext<LexerBlockContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public LexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerElementContext lexerElement() {
		LexerElementContext _localctx = new LexerElementContext(Context, State);
		EnterRule(_localctx, 74, RULE_lexerElement);
		int _la;
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; labeledLexerElement();
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 409; ebnfSuffix();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412; lexerAtom();
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 413; ebnfSuffix();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416; lexerBlock();
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
					{
					State = 417; ebnfSuffix();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 420; actionBlock();
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 421; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledLexerElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		public LexerAtomContext lexerAtom() {
			return GetRuleContext<LexerAtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledLexerElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledLexerElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledLexerElementContext labeledLexerElement() {
		LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_labeledLexerElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; id();
			State = 427;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 430;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case LEXER_CHAR_SET:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 428; lexerAtom();
				}
				break;
			case LPAREN:
				{
				State = 429; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerBlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerAltListContext lexerAltList() {
			return GetRuleContext<LexerAltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerBlockContext lexerBlock() {
		LexerBlockContext _localctx = new LexerBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_lexerBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(LPAREN);
			State = 433; lexerAltList();
			State = 434; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandsContext : ParserRuleContext {
		public ITerminalNode RARROW() { return GetToken(ANTLRv4Parser.RARROW, 0); }
		public LexerCommandContext[] lexerCommand() {
			return GetRuleContexts<LexerCommandContext>();
		}
		public LexerCommandContext lexerCommand(int i) {
			return GetRuleContext<LexerCommandContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public LexerCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommands; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommands(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommands(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandsContext lexerCommands() {
		LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
		EnterRule(_localctx, 80, RULE_lexerCommands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(RARROW);
			State = 437; lexerCommand();
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 438; Match(COMMA);
				State = 439; lexerCommand();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandContext : ParserRuleContext {
		public LexerCommandNameContext lexerCommandName() {
			return GetRuleContext<LexerCommandNameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public LexerCommandExprContext lexerCommandExpr() {
			return GetRuleContext<LexerCommandExprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public LexerCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandContext lexerCommand() {
		LexerCommandContext _localctx = new LexerCommandContext(Context, State);
		EnterRule(_localctx, 82, RULE_lexerCommand);
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; lexerCommandName();
				State = 446; Match(LPAREN);
				State = 447; lexerCommandExpr();
				State = 448; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; lexerCommandName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandNameContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
		public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandNameContext lexerCommandName() {
		LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
		EnterRule(_localctx, 84, RULE_lexerCommandName);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453; id();
				}
				break;
			case MODE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454; Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerCommandExprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
		public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerCommandExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerCommandExprContext lexerCommandExpr() {
		LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
		EnterRule(_localctx, 86, RULE_lexerCommandExpr);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457; id();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltListContext : ParserRuleContext {
		public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public AltListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAltList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAltList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltListContext altList() {
		AltListContext _localctx = new AltListContext(Context, State);
		EnterRule(_localctx, 88, RULE_altList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; alternative();
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 462; Match(OR);
				State = 463; alternative();
				}
				}
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAlternative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAlternative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 90, RULE_alternative);
		int _la;
		try {
			State = 478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case BEGIN_ACTION:
			case LPAREN:
			case LT:
			case DOT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 469; elementOptions();
					}
				}

				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 472; element();
					}
					}
					State = 475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0) );
				}
				break;
			case SEMI:
			case RPAREN:
			case OR:
			case POUND:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public LabeledElementContext labeledElement() {
			return GetRuleContext<LabeledElementContext>(0);
		}
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public EbnfContext ebnf() {
			return GetRuleContext<EbnfContext>(0);
		}
		public ActionBlockContext actionBlock() {
			return GetRuleContext<ActionBlockContext>(0);
		}
		public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_element);
		int _la;
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480; labeledElement();
				State = 483;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 481; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485; atom();
				State = 488;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUESTION:
				case STAR:
				case PLUS:
					{
					State = 486; ebnfSuffix();
					}
					break;
				case TOKEN_REF:
				case RULE_REF:
				case STRING_LITERAL:
				case BEGIN_ACTION:
				case SEMI:
				case LPAREN:
				case RPAREN:
				case OR:
				case DOT:
				case POUND:
				case NOT:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; ebnf();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491; actionBlock();
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 492; Match(QUESTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledElementContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LabeledElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLabeledElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLabeledElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledElementContext labeledElement() {
		LabeledElementContext _localctx = new LabeledElementContext(Context, State);
		EnterRule(_localctx, 94, RULE_labeledElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; id();
			State = 498;
			_la = TokenStream.LA(1);
			if ( !(_la==ASSIGN || _la==PLUS_ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
			case RULE_REF:
			case STRING_LITERAL:
			case DOT:
			case NOT:
				{
				State = 499; atom();
				}
				break;
			case LPAREN:
				{
				State = 500; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockSuffixContext blockSuffix() {
			return GetRuleContext<BlockSuffixContext>(0);
		}
		public EbnfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfContext ebnf() {
		EbnfContext _localctx = new EbnfContext(Context, State);
		EnterRule(_localctx, 96, RULE_ebnf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; block();
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0)) {
				{
				State = 504; blockSuffix();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSuffixContext : ParserRuleContext {
		public EbnfSuffixContext ebnfSuffix() {
			return GetRuleContext<EbnfSuffixContext>(0);
		}
		public BlockSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSuffixContext blockSuffix() {
		BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
		EnterRule(_localctx, 98, RULE_blockSuffix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; ebnfSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EbnfSuffixContext : ParserRuleContext {
		public ITerminalNode[] QUESTION() { return GetTokens(ANTLRv4Parser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(ANTLRv4Parser.QUESTION, i);
		}
		public ITerminalNode STAR() { return GetToken(ANTLRv4Parser.STAR, 0); }
		public ITerminalNode PLUS() { return GetToken(ANTLRv4Parser.PLUS, 0); }
		public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ebnfSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterEbnfSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitEbnfSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEbnfSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EbnfSuffixContext ebnfSuffix() {
		EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
		EnterRule(_localctx, 100, RULE_ebnfSuffix);
		int _la;
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUESTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; Match(QUESTION);
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 510; Match(QUESTION);
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513; Match(STAR);
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 514; Match(QUESTION);
					}
				}

				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 517; Match(PLUS);
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUESTION) {
					{
					State = 518; Match(QUESTION);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerAtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public LexerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterLexerAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitLexerAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerAtomContext lexerAtom() {
		LexerAtomContext _localctx = new LexerAtomContext(Context, State);
		EnterRule(_localctx, 102, RULE_lexerAtom);
		int _la;
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 525; Match(RULE_REF);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 526; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 527; Match(LEXER_CHAR_SET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 528; Match(DOT);
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 529; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public TerminalContext terminal() {
			return GetRuleContext<TerminalContext>(0);
		}
		public RulerefContext ruleref() {
			return GetRuleContext<RulerefContext>(0);
		}
		public NotSetContext notSet() {
			return GetRuleContext<NotSetContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 104, RULE_atom);
		int _la;
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534; range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535; terminal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 536; ruleref();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 537; notSet();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 538; Match(DOT);
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 539; elementOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotSetContext : ParserRuleContext {
		public ITerminalNode NOT() { return GetToken(ANTLRv4Parser.NOT, 0); }
		public SetElementContext setElement() {
			return GetRuleContext<SetElementContext>(0);
		}
		public BlockSetContext blockSet() {
			return GetRuleContext<BlockSetContext>(0);
		}
		public NotSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterNotSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitNotSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotSetContext notSet() {
		NotSetContext _localctx = new NotSetContext(Context, State);
		EnterRule(_localctx, 106, RULE_notSet);
		try {
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544; Match(NOT);
				State = 545; setElement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 546; Match(NOT);
				State = 547; blockSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockSetContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public SetElementContext[] setElement() {
			return GetRuleContexts<SetElementContext>();
		}
		public SetElementContext setElement(int i) {
			return GetRuleContext<SetElementContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(ANTLRv4Parser.OR, i);
		}
		public BlockSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockSet; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlockSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlockSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockSetContext blockSet() {
		BlockSetContext _localctx = new BlockSetContext(Context, State);
		EnterRule(_localctx, 108, RULE_blockSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(LPAREN);
			State = 551; setElement();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 552; Match(OR);
				State = 553; setElement();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 559; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetElementContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
		public SetElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterSetElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitSetElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetElementContext setElement() {
		SetElementContext _localctx = new SetElementContext(Context, State);
		EnterRule(_localctx, 110, RULE_setElement);
		int _la;
		try {
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; Match(TOKEN_REF);
				State = 563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 562; elementOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; Match(STRING_LITERAL);
				State = 567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 566; elementOptions();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 569; range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 570; Match(LEXER_CHAR_SET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
		public AltListContext altList() {
			return GetRuleContext<AltListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
		public OptionsSpecContext optionsSpec() {
			return GetRuleContext<OptionsSpecContext>(0);
		}
		public RuleActionContext[] ruleAction() {
			return GetRuleContexts<RuleActionContext>();
		}
		public RuleActionContext ruleAction(int i) {
			return GetRuleContext<RuleActionContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 112, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(LPAREN);
			State = 584;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0)) {
				{
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 574; optionsSpec();
					}
				}

				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT) {
					{
					{
					State = 577; ruleAction();
					}
					}
					State = 582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 583; Match(COLON);
				}
			}

			State = 586; altList();
			State = 587; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulerefContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ArgActionBlockContext argActionBlock() {
			return GetRuleContext<ArgActionBlockContext>(0);
		}
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public RulerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRuleref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRuleref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuleref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulerefContext ruleref() {
		RulerefContext _localctx = new RulerefContext(Context, State);
		EnterRule(_localctx, 114, RULE_ruleref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(RULE_REF);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN_ARGUMENT) {
				{
				State = 590; argActionBlock();
				}
			}

			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 593; elementOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] STRING_LITERAL() { return GetTokens(ANTLRv4Parser.STRING_LITERAL); }
		public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(ANTLRv4Parser.STRING_LITERAL, i);
		}
		public ITerminalNode RANGE() { return GetToken(ANTLRv4Parser.RANGE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 116, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(STRING_LITERAL);
			State = 597; Match(RANGE);
			State = 598; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TerminalContext : ParserRuleContext {
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public ElementOptionsContext elementOptions() {
			return GetRuleContext<ElementOptionsContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public TerminalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TerminalContext terminal() {
		TerminalContext _localctx = new TerminalContext(Context, State);
		EnterRule(_localctx, 118, RULE_terminal);
		int _la;
		try {
			State = 608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOKEN_REF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 600; Match(TOKEN_REF);
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 601; elementOptions();
					}
				}

				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604; Match(STRING_LITERAL);
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 605; elementOptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
		public ElementOptionContext[] elementOption() {
			return GetRuleContexts<ElementOptionContext>();
		}
		public ElementOptionContext elementOption(int i) {
			return GetRuleContext<ElementOptionContext>(i);
		}
		public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ANTLRv4Parser.COMMA, i);
		}
		public ElementOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionsContext elementOptions() {
		ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
		EnterRule(_localctx, 120, RULE_elementOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(LT);
			State = 611; elementOption();
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 612; Match(COMMA);
				State = 613; elementOption();
				}
				}
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 619; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOptionContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
		public ElementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterElementOption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitElementOption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOptionContext elementOption() {
		ElementOptionContext _localctx = new ElementOptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_elementOption);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622; id();
				State = 623; Match(ASSIGN);
				State = 626;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TOKEN_REF:
				case RULE_REF:
					{
					State = 624; id();
					}
					break;
				case STRING_LITERAL:
					{
					State = 625; Match(STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
		public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRv4ParserVisitor<TResult> typedVisitor = visitor as IANTLRv4ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 124, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_REF || _la==RULE_REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3?\x27B");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t");
		sb.Append(")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4");
		sb.Append("\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35");
		sb.Append("\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:");
		sb.Append("\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x3\x2\x5\x2\x82\n");
		sb.Append("\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x88\n\x2\f\x2\xE\x2\x8B\v\x2");
		sb.Append("\x3\x2\x3\x2\a\x2\x8F\n\x2\f\x2\xE\x2\x92\v\x2\x3\x2\x3\x2\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x9B\n\x3\x3\x4\x3\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x5\x4\xA2\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a");
		sb.Append("\x5\xA9\n\x5\f\x5\xE\x5\xAC\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xB7\n\a\f\a\xE\a\xBA\v\a\x3\a\x3");
		sb.Append("\a\x3\a\x5\a\xBF\n\a\x3\b\x3\b\x3\b\x3\b\a\b\xC5\n\b\f\b\xE");
		sb.Append("\b\xC8\v\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xD1\n\t\x3");
		sb.Append("\n\x3\n\x3\n\x5\n\xD6\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\xDD");
		sb.Append("\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\xE4\n\f\f\f\xE\f\xE7\v\f\x3");
		sb.Append("\f\x5\f\xEA\n\f\x3\r\x3\r\x3\r\x3\r\x5\r\xF0\n\r\x3\r\x3\r\x3");
		sb.Append("\r\x3\xE\x3\xE\x3\xE\x5\xE\xF8\n\xE\x3\xF\x3\xF\a\xF\xFC\n\xF");
		sb.Append("\f\xF\xE\xF\xFF\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\x105\n");
		sb.Append("\x10\f\x10\xE\x10\x108\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\a\x11\x110\n\x11\f\x11\xE\x11\x113\v\x11\x3\x12");
		sb.Append("\a\x12\x116\n\x12\f\x12\xE\x12\x119\v\x12\x3\x13\x3\x13\x5\x13");
		sb.Append("\x11D\n\x13\x3\x14\x5\x14\x120\n\x14\x3\x14\x5\x14\x123\n\x14");
		sb.Append("\x3\x14\x3\x14\x5\x14\x127\n\x14\x3\x14\x5\x14\x12A\n\x14\x3");
		sb.Append("\x14\x5\x14\x12D\n\x14\x3\x14\x5\x14\x130\n\x14\x3\x14\a\x14");
		sb.Append("\x133\n\x14\f\x14\xE\x14\x136\v\x14\x3\x14\x3\x14\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x15\a\x15\x13E\n\x15\f\x15\xE\x15\x141\v\x15");
		sb.Append("\x3\x15\x5\x15\x144\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17");
		sb.Append("\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x14F\n\x18\x3\x19\x3\x19");
		sb.Append("\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\x158\n\x1A\f\x1A\xE");
		sb.Append("\x1A\x15B\v\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1C\x3\x1D\x6\x1D\x165\n\x1D\r\x1D\xE\x1D\x166\x3\x1E\x3\x1E");
		sb.Append("\x3\x1F\x3\x1F\x3 \x3 \x3 \a \x170\n \f \xE \x173\v \x3!\x3");
		sb.Append("!\x3!\x5!\x178\n!\x3\"\x5\"\x17B\n\"\x3\"\x5\"\x17E\n\"\x3\"");
		sb.Append("\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\a$\x18A\n$\f$\xE$\x18D");
		sb.Append("\v$\x3%\x3%\x5%\x191\n%\x3%\x5%\x194\n%\x3&\x6&\x197\n&\r&\xE");
		sb.Append("&\x198\x3\'\x3\'\x5\'\x19D\n\'\x3\'\x3\'\x5\'\x1A1\n\'\x3\'");
		sb.Append("\x3\'\x5\'\x1A5\n\'\x3\'\x3\'\x5\'\x1A9\n\'\x5\'\x1AB\n\'\x3");
		sb.Append("(\x3(\x3(\x3(\x5(\x1B1\n(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\a");
		sb.Append("*\x1BB\n*\f*\xE*\x1BE\v*\x3+\x3+\x3+\x3+\x3+\x3+\x5+\x1C6\n");
		sb.Append("+\x3,\x3,\x5,\x1CA\n,\x3-\x3-\x5-\x1CE\n-\x3.\x3.\x3.\a.\x1D3");
		sb.Append("\n.\f.\xE.\x1D6\v.\x3/\x5/\x1D9\n/\x3/\x6/\x1DC\n/\r/\xE/\x1DD");
		sb.Append("\x3/\x5/\x1E1\n/\x3\x30\x3\x30\x3\x30\x5\x30\x1E6\n\x30\x3\x30");
		sb.Append("\x3\x30\x3\x30\x5\x30\x1EB\n\x30\x3\x30\x3\x30\x3\x30\x5\x30");
		sb.Append("\x1F0\n\x30\x5\x30\x1F2\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x5");
		sb.Append("\x31\x1F8\n\x31\x3\x32\x3\x32\x5\x32\x1FC\n\x32\x3\x33\x3\x33");
		sb.Append("\x3\x34\x3\x34\x5\x34\x202\n\x34\x3\x34\x3\x34\x5\x34\x206\n");
		sb.Append("\x34\x3\x34\x3\x34\x5\x34\x20A\n\x34\x5\x34\x20C\n\x34\x3\x35");
		sb.Append("\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x215\n\x35");
		sb.Append("\x5\x35\x217\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36");
		sb.Append("\x5\x36\x21F\n\x36\x5\x36\x221\n\x36\x3\x37\x3\x37\x3\x37\x3");
		sb.Append("\x37\x5\x37\x227\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\a\x38\x22D");
		sb.Append("\n\x38\f\x38\xE\x38\x230\v\x38\x3\x38\x3\x38\x3\x39\x3\x39\x5");
		sb.Append("\x39\x236\n\x39\x3\x39\x3\x39\x5\x39\x23A\n\x39\x3\x39\x3\x39");
		sb.Append("\x5\x39\x23E\n\x39\x3:\x3:\x5:\x242\n:\x3:\a:\x245\n:\f:\xE");
		sb.Append(":\x248\v:\x3:\x5:\x24B\n:\x3:\x3:\x3:\x3;\x3;\x5;\x252\n;\x3");
		sb.Append(";\x5;\x255\n;\x3<\x3<\x3<\x3<\x3=\x3=\x5=\x25D\n=\x3=\x3=\x5");
		sb.Append("=\x261\n=\x5=\x263\n=\x3>\x3>\x3>\x3>\a>\x269\n>\f>\xE>\x26C");
		sb.Append("\v>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x5?\x275\n?\x5?\x277\n?\x3@");
		sb.Append("\x3@\x3@\x2\x2\x41\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A");
		sb.Append("\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPR");
		sb.Append("TVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x2\x5\x4\x2\x12\x12\x16\x18");
		sb.Append("\x4\x2**--\x3\x2\x3\x4\x2A5\x2\x81\x3\x2\x2\x2\x4\x9A\x3\x2");
		sb.Append("\x2\x2\x6\xA1\x3\x2\x2\x2\b\xA3\x3\x2\x2\x2\n\xAF\x3\x2\x2\x2");
		sb.Append("\f\xBE\x3\x2\x2\x2\xE\xC0\x3\x2\x2\x2\x10\xD0\x3\x2\x2\x2\x12");
		sb.Append("\xD2\x3\x2\x2\x2\x14\xD9\x3\x2\x2\x2\x16\xE0\x3\x2\x2\x2\x18");
		sb.Append("\xEB\x3\x2\x2\x2\x1A\xF7\x3\x2\x2\x2\x1C\xF9\x3\x2\x2\x2\x1E");
		sb.Append("\x102\x3\x2\x2\x2 \x10B\x3\x2\x2\x2\"\x117\x3\x2\x2\x2$\x11C");
		sb.Append("\x3\x2\x2\x2&\x11F\x3\x2\x2\x2(\x13F\x3\x2\x2\x2*\x145\x3\x2");
		sb.Append("\x2\x2,\x149\x3\x2\x2\x2.\x14E\x3\x2\x2\x2\x30\x150\x3\x2\x2");
		sb.Append("\x2\x32\x153\x3\x2\x2\x2\x34\x15C\x3\x2\x2\x2\x36\x15F\x3\x2");
		sb.Append("\x2\x2\x38\x164\x3\x2\x2\x2:\x168\x3\x2\x2\x2<\x16A\x3\x2\x2");
		sb.Append("\x2>\x16C\x3\x2\x2\x2@\x174\x3\x2\x2\x2\x42\x17A\x3\x2\x2\x2");
		sb.Append("\x44\x184\x3\x2\x2\x2\x46\x186\x3\x2\x2\x2H\x193\x3\x2\x2\x2");
		sb.Append("J\x196\x3\x2\x2\x2L\x1AA\x3\x2\x2\x2N\x1AC\x3\x2\x2\x2P\x1B2");
		sb.Append("\x3\x2\x2\x2R\x1B6\x3\x2\x2\x2T\x1C5\x3\x2\x2\x2V\x1C9\x3\x2");
		sb.Append("\x2\x2X\x1CD\x3\x2\x2\x2Z\x1CF\x3\x2\x2\x2\\\x1E0\x3\x2\x2\x2");
		sb.Append("^\x1F1\x3\x2\x2\x2`\x1F3\x3\x2\x2\x2\x62\x1F9\x3\x2\x2\x2\x64");
		sb.Append("\x1FD\x3\x2\x2\x2\x66\x20B\x3\x2\x2\x2h\x216\x3\x2\x2\x2j\x220");
		sb.Append("\x3\x2\x2\x2l\x226\x3\x2\x2\x2n\x228\x3\x2\x2\x2p\x23D\x3\x2");
		sb.Append("\x2\x2r\x23F\x3\x2\x2\x2t\x24F\x3\x2\x2\x2v\x256\x3\x2\x2\x2");
		sb.Append("x\x262\x3\x2\x2\x2z\x264\x3\x2\x2\x2|\x276\x3\x2\x2\x2~\x278");
		sb.Append("\x3\x2\x2\x2\x80\x82\a\x6\x2\x2\x81\x80\x3\x2\x2\x2\x81\x82");
		sb.Append("\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x5\x4\x3\x2\x84\x85");
		sb.Append("\x5~@\x2\x85\x89\a\"\x2\x2\x86\x88\x5\x6\x4\x2\x87\x86\x3\x2");
		sb.Append("\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2");
		sb.Append("\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x90\x5\"");
		sb.Append("\x12\x2\x8D\x8F\x5 \x11\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3\x2");
		sb.Append("\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x93\x3\x2");
		sb.Append("\x2\x2\x92\x90\x3\x2\x2\x2\x93\x94\a\x2\x2\x3\x94\x3\x3\x2\x2");
		sb.Append("\x2\x95\x96\a\x13\x2\x2\x96\x9B\a\x15\x2\x2\x97\x98\a\x14\x2");
		sb.Append("\x2\x98\x9B\a\x15\x2\x2\x99\x9B\a\x15\x2\x2\x9A\x95\x3\x2\x2");
		sb.Append("\x2\x9A\x97\x3\x2\x2\x2\x9A\x99\x3\x2\x2\x2\x9B\x5\x3\x2\x2");
		sb.Append("\x2\x9C\xA2\x5\b\x5\x2\x9D\xA2\x5\xE\b\x2\x9E\xA2\x5\x12\n\x2");
		sb.Append("\x9F\xA2\x5\x14\v\x2\xA0\xA2\x5\x18\r\x2\xA1\x9C\x3\x2\x2\x2");
		sb.Append("\xA1\x9D\x3\x2\x2\x2\xA1\x9E\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2");
		sb.Append("\xA1\xA0\x3\x2\x2\x2\xA2\a\x3\x2\x2\x2\xA3\xA4\a\xE\x2\x2\xA4");
		sb.Append("\xAA\a%\x2\x2\xA5\xA6\x5\n\x6\x2\xA6\xA7\a\"\x2\x2\xA7\xA9\x3");
		sb.Append("\x2\x2\x2\xA8\xA5\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3");
		sb.Append("\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xAA\x3");
		sb.Append("\x2\x2\x2\xAD\xAE\a&\x2\x2\xAE\t\x3\x2\x2\x2\xAF\xB0\x5~@\x2");
		sb.Append("\xB0\xB1\a*\x2\x2\xB1\xB2\x5\f\a\x2\xB2\v\x3\x2\x2\x2\xB3\xB8");
		sb.Append("\x5~@\x2\xB4\xB5\a\x32\x2\x2\xB5\xB7\x5~@\x2\xB6\xB4\x3\x2\x2");
		sb.Append("\x2\xB7\xBA\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2");
		sb.Append("\x2\xB9\xBF\x3\x2\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBF\a\n\x2\x2");
		sb.Append("\xBC\xBF\x5\x1C\xF\x2\xBD\xBF\a\t\x2\x2\xBE\xB3\x3\x2\x2\x2");
		sb.Append("\xBE\xBB\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE\xBD\x3\x2\x2\x2");
		sb.Append("\xBF\r\x3\x2\x2\x2\xC0\xC1\a\x11\x2\x2\xC1\xC6\x5\x10\t\x2\xC2");
		sb.Append("\xC3\a!\x2\x2\xC3\xC5\x5\x10\t\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC8");
		sb.Append("\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC9");
		sb.Append("\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCA\a\"\x2\x2\xCA\xF\x3");
		sb.Append("\x2\x2\x2\xCB\xCC\x5~@\x2\xCC\xCD\a*\x2\x2\xCD\xCE\x5~@\x2\xCE");
		sb.Append("\xD1\x3\x2\x2\x2\xCF\xD1\x5~@\x2\xD0\xCB\x3\x2\x2\x2\xD0\xCF");
		sb.Append("\x3\x2\x2\x2\xD1\x11\x3\x2\x2\x2\xD2\xD3\a\xF\x2\x2\xD3\xD5");
		sb.Append("\a%\x2\x2\xD4\xD6\x5\x16\f\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3");
		sb.Append("\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8\a&\x2\x2\xD8\x13\x3\x2");
		sb.Append("\x2\x2\xD9\xDA\a\x10\x2\x2\xDA\xDC\a%\x2\x2\xDB\xDD\x5\x16\f");
		sb.Append("\x2\xDC\xDB\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2");
		sb.Append("\x2\xDE\xDF\a&\x2\x2\xDF\x15\x3\x2\x2\x2\xE0\xE5\x5~@\x2\xE1");
		sb.Append("\xE2\a!\x2\x2\xE2\xE4\x5~@\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE7\x3");
		sb.Append("\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE9\x3");
		sb.Append("\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEA\a!\x2\x2\xE9\xE8\x3\x2");
		sb.Append("\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\x17\x3\x2\x2\x2\xEB\xEF\a\x33");
		sb.Append("\x2\x2\xEC\xED\x5\x1A\xE\x2\xED\xEE\a \x2\x2\xEE\xF0\x3\x2\x2");
		sb.Append("\x2\xEF\xEC\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1\x3\x2\x2");
		sb.Append("\x2\xF1\xF2\x5~@\x2\xF2\xF3\x5\x1C\xF\x2\xF3\x19\x3\x2\x2\x2");
		sb.Append("\xF4\xF8\x5~@\x2\xF5\xF8\a\x13\x2\x2\xF6\xF8\a\x14\x2\x2\xF7");
		sb.Append("\xF4\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2\x2\x2\xF8");
		sb.Append("\x1B\x3\x2\x2\x2\xF9\xFD\a\r\x2\x2\xFA\xFC\a>\x2\x2\xFB\xFA");
		sb.Append("\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE");
		sb.Append("\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100\x101");
		sb.Append("\a<\x2\x2\x101\x1D\x3\x2\x2\x2\x102\x106\a\f\x2\x2\x103\x105");
		sb.Append("\a;\x2\x2\x104\x103\x3\x2\x2\x2\x105\x108\x3\x2\x2\x2\x106\x104");
		sb.Append("\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x109\x3\x2\x2\x2\x108");
		sb.Append("\x106\x3\x2\x2\x2\x109\x10A\a\x39\x2\x2\x10A\x1F\x3\x2\x2\x2");
		sb.Append("\x10B\x10C\a\x1E\x2\x2\x10C\x10D\x5~@\x2\x10D\x111\a\"\x2\x2");
		sb.Append("\x10E\x110\x5\x42\"\x2\x10F\x10E\x3\x2\x2\x2\x110\x113\x3\x2");
		sb.Append("\x2\x2\x111\x10F\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112!\x3");
		sb.Append("\x2\x2\x2\x113\x111\x3\x2\x2\x2\x114\x116\x5$\x13\x2\x115\x114");
		sb.Append("\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117");
		sb.Append("\x118\x3\x2\x2\x2\x118#\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A");
		sb.Append("\x11D\x5&\x14\x2\x11B\x11D\x5\x42\"\x2\x11C\x11A\x3\x2\x2\x2");
		sb.Append("\x11C\x11B\x3\x2\x2\x2\x11D%\x3\x2\x2\x2\x11E\x120\a\x6\x2\x2");
		sb.Append("\x11F\x11E\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2");
		sb.Append("\x2\x2\x121\x123\x5\x38\x1D\x2\x122\x121\x3\x2\x2\x2\x122\x123");
		sb.Append("\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x126\a\x4\x2\x2\x125");
		sb.Append("\x127\x5\x1E\x10\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2");
		sb.Append("\x2\x127\x129\x3\x2\x2\x2\x128\x12A\x5\x30\x19\x2\x129\x128");
		sb.Append("\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2\x12B");
		sb.Append("\x12D\x5\x32\x1A\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2");
		sb.Append("\x2\x12D\x12F\x3\x2\x2\x2\x12E\x130\x5\x34\x1B\x2\x12F\x12E");
		sb.Append("\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x134\x3\x2\x2\x2\x131");
		sb.Append("\x133\x5.\x18\x2\x132\x131\x3\x2\x2\x2\x133\x136\x3\x2\x2\x2");
		sb.Append("\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x137\x3\x2");
		sb.Append("\x2\x2\x136\x134\x3\x2\x2\x2\x137\x138\a\x1F\x2\x2\x138\x139");
		sb.Append("\x5<\x1F\x2\x139\x13A\a\"\x2\x2\x13A\x13B\x5(\x15\x2\x13B\'");
		sb.Append("\x3\x2\x2\x2\x13C\x13E\x5*\x16\x2\x13D\x13C\x3\x2\x2\x2\x13E");
		sb.Append("\x141\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2");
		sb.Append("\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142\x144\x5,\x17");
		sb.Append("\x2\x143\x142\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144)\x3\x2");
		sb.Append("\x2\x2\x145\x146\a\x1C\x2\x2\x146\x147\x5\x1E\x10\x2\x147\x148");
		sb.Append("\x5\x1C\xF\x2\x148+\x3\x2\x2\x2\x149\x14A\a\x1D\x2\x2\x14A\x14B");
		sb.Append("\x5\x1C\xF\x2\x14B-\x3\x2\x2\x2\x14C\x14F\x5\b\x5\x2\x14D\x14F");
		sb.Append("\x5\x36\x1C\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14D\x3\x2\x2\x2\x14F");
		sb.Append("/\x3\x2\x2\x2\x150\x151\a\x19\x2\x2\x151\x152\x5\x1E\x10\x2");
		sb.Append("\x152\x31\x3\x2\x2\x2\x153\x154\a\x1B\x2\x2\x154\x159\x5~@\x2");
		sb.Append("\x155\x156\a!\x2\x2\x156\x158\x5~@\x2\x157\x155\x3\x2\x2\x2");
		sb.Append("\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2");
		sb.Append("\x2\x2\x15A\x33\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15D");
		sb.Append("\a\x1A\x2\x2\x15D\x15E\x5\x1E\x10\x2\x15E\x35\x3\x2\x2\x2\x15F");
		sb.Append("\x160\a\x33\x2\x2\x160\x161\x5~@\x2\x161\x162\x5\x1C\xF\x2\x162");
		sb.Append("\x37\x3\x2\x2\x2\x163\x165\x5:\x1E\x2\x164\x163\x3\x2\x2\x2");
		sb.Append("\x165\x166\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2");
		sb.Append("\x2\x2\x167\x39\x3\x2\x2\x2\x168\x169\t\x2\x2\x2\x169;\x3\x2");
		sb.Append("\x2\x2\x16A\x16B\x5> \x2\x16B=\x3\x2\x2\x2\x16C\x171\x5@!\x2");
		sb.Append("\x16D\x16E\a/\x2\x2\x16E\x170\x5@!\x2\x16F\x16D\x3\x2\x2\x2");
		sb.Append("\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2");
		sb.Append("\x2\x2\x172?\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x174\x177\x5");
		sb.Append("\\/\x2\x175\x176\a\x34\x2\x2\x176\x178\x5~@\x2\x177\x175\x3");
		sb.Append("\x2\x2\x2\x177\x178\x3\x2\x2\x2\x178\x41\x3\x2\x2\x2\x179\x17B");
		sb.Append("\a\x6\x2\x2\x17A\x179\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B");
		sb.Append("\x17D\x3\x2\x2\x2\x17C\x17E\a\x12\x2\x2\x17D\x17C\x3\x2\x2\x2");
		sb.Append("\x17D\x17E\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x180\a\x3");
		sb.Append("\x2\x2\x180\x181\a\x1F\x2\x2\x181\x182\x5\x44#\x2\x182\x183");
		sb.Append("\a\"\x2\x2\x183\x43\x3\x2\x2\x2\x184\x185\x5\x46$\x2\x185\x45");
		sb.Append("\x3\x2\x2\x2\x186\x18B\x5H%\x2\x187\x188\a/\x2\x2\x188\x18A");
		sb.Append("\x5H%\x2\x189\x187\x3\x2\x2\x2\x18A\x18D\x3\x2\x2\x2\x18B\x189");
		sb.Append("\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18CG\x3\x2\x2\x2\x18D\x18B");
		sb.Append("\x3\x2\x2\x2\x18E\x190\x5J&\x2\x18F\x191\x5R*\x2\x190\x18F\x3");
		sb.Append("\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x194\x3\x2\x2\x2\x192\x194");
		sb.Append("\x3\x2\x2\x2\x193\x18E\x3\x2\x2\x2\x193\x192\x3\x2\x2\x2\x194");
		sb.Append("I\x3\x2\x2\x2\x195\x197\x5L\'\x2\x196\x195\x3\x2\x2\x2\x197");
		sb.Append("\x198\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2");
		sb.Append("\x199K\x3\x2\x2\x2\x19A\x19C\x5N(\x2\x19B\x19D\x5\x66\x34\x2");
		sb.Append("\x19C\x19B\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x1AB\x3\x2");
		sb.Append("\x2\x2\x19E\x1A0\x5h\x35\x2\x19F\x1A1\x5\x66\x34\x2\x1A0\x19F");
		sb.Append("\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1AB\x3\x2\x2\x2\x1A2");
		sb.Append("\x1A4\x5P)\x2\x1A3\x1A5\x5\x66\x34\x2\x1A4\x1A3\x3\x2\x2\x2");
		sb.Append("\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1AB\x3\x2\x2\x2\x1A6\x1A8\x5\x1C");
		sb.Append("\xF\x2\x1A7\x1A9\a+\x2\x2\x1A8\x1A7\x3\x2\x2\x2\x1A8\x1A9\x3");
		sb.Append("\x2\x2\x2\x1A9\x1AB\x3\x2\x2\x2\x1AA\x19A\x3\x2\x2\x2\x1AA\x19E");
		sb.Append("\x3\x2\x2\x2\x1AA\x1A2\x3\x2\x2\x2\x1AA\x1A6\x3\x2\x2\x2\x1AB");
		sb.Append("M\x3\x2\x2\x2\x1AC\x1AD\x5~@\x2\x1AD\x1B0\t\x3\x2\x2\x1AE\x1B1");
		sb.Append("\x5h\x35\x2\x1AF\x1B1\x5r:\x2\x1B0\x1AE\x3\x2\x2\x2\x1B0\x1AF");
		sb.Append("\x3\x2\x2\x2\x1B1O\x3\x2\x2\x2\x1B2\x1B3\a#\x2\x2\x1B3\x1B4");
		sb.Append("\x5\x46$\x2\x1B4\x1B5\a$\x2\x2\x1B5Q\x3\x2\x2\x2\x1B6\x1B7\a");
		sb.Append("\'\x2\x2\x1B7\x1BC\x5T+\x2\x1B8\x1B9\a!\x2\x2\x1B9\x1BB\x5T");
		sb.Append("+\x2\x1BA\x1B8\x3\x2\x2\x2\x1BB\x1BE\x3\x2\x2\x2\x1BC\x1BA\x3");
		sb.Append("\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BDS\x3\x2\x2\x2\x1BE\x1BC");
		sb.Append("\x3\x2\x2\x2\x1BF\x1C0\x5V,\x2\x1C0\x1C1\a#\x2\x2\x1C1\x1C2");
		sb.Append("\x5X-\x2\x1C2\x1C3\a$\x2\x2\x1C3\x1C6\x3\x2\x2\x2\x1C4\x1C6");
		sb.Append("\x5V,\x2\x1C5\x1BF\x3\x2\x2\x2\x1C5\x1C4\x3\x2\x2\x2\x1C6U\x3");
		sb.Append("\x2\x2\x2\x1C7\x1CA\x5~@\x2\x1C8\x1CA\a\x1E\x2\x2\x1C9\x1C7");
		sb.Append("\x3\x2\x2\x2\x1C9\x1C8\x3\x2\x2\x2\x1CAW\x3\x2\x2\x2\x1CB\x1CE");
		sb.Append("\x5~@\x2\x1CC\x1CE\a\t\x2\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CC");
		sb.Append("\x3\x2\x2\x2\x1CEY\x3\x2\x2\x2\x1CF\x1D4\x5\\/\x2\x1D0\x1D1");
		sb.Append("\a/\x2\x2\x1D1\x1D3\x5\\/\x2\x1D2\x1D0\x3\x2\x2\x2\x1D3\x1D6");
		sb.Append("\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5");
		sb.Append("[\x3\x2\x2\x2\x1D6\x1D4\x3\x2\x2\x2\x1D7\x1D9\x5z>\x2\x1D8\x1D7");
		sb.Append("\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DB\x3\x2\x2\x2\x1DA");
		sb.Append("\x1DC\x5^\x30\x2\x1DB\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2");
		sb.Append("\x1DD\x1DB\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE\x1E1\x3\x2");
		sb.Append("\x2\x2\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1D8\x3\x2\x2\x2\x1E0\x1DF");
		sb.Append("\x3\x2\x2\x2\x1E1]\x3\x2\x2\x2\x1E2\x1E5\x5`\x31\x2\x1E3\x1E6");
		sb.Append("\x5\x66\x34\x2\x1E4\x1E6\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2\x2\x1E5");
		sb.Append("\x1E4\x3\x2\x2\x2\x1E6\x1F2\x3\x2\x2\x2\x1E7\x1EA\x5j\x36\x2");
		sb.Append("\x1E8\x1EB\x5\x66\x34\x2\x1E9\x1EB\x3\x2\x2\x2\x1EA\x1E8\x3");
		sb.Append("\x2\x2\x2\x1EA\x1E9\x3\x2\x2\x2\x1EB\x1F2\x3\x2\x2\x2\x1EC\x1F2");
		sb.Append("\x5\x62\x32\x2\x1ED\x1EF\x5\x1C\xF\x2\x1EE\x1F0\a+\x2\x2\x1EF");
		sb.Append("\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F2\x3\x2\x2\x2");
		sb.Append("\x1F1\x1E2\x3\x2\x2\x2\x1F1\x1E7\x3\x2\x2\x2\x1F1\x1EC\x3\x2");
		sb.Append("\x2\x2\x1F1\x1ED\x3\x2\x2\x2\x1F2_\x3\x2\x2\x2\x1F3\x1F4\x5");
		sb.Append("~@\x2\x1F4\x1F7\t\x3\x2\x2\x1F5\x1F8\x5j\x36\x2\x1F6\x1F8\x5");
		sb.Append("r:\x2\x1F7\x1F5\x3\x2\x2\x2\x1F7\x1F6\x3\x2\x2\x2\x1F8\x61\x3");
		sb.Append("\x2\x2\x2\x1F9\x1FB\x5r:\x2\x1FA\x1FC\x5\x64\x33\x2\x1FB\x1FA");
		sb.Append("\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x63\x3\x2\x2\x2\x1FD");
		sb.Append("\x1FE\x5\x66\x34\x2\x1FE\x65\x3\x2\x2\x2\x1FF\x201\a+\x2\x2");
		sb.Append("\x200\x202\a+\x2\x2\x201\x200\x3\x2\x2\x2\x201\x202\x3\x2\x2");
		sb.Append("\x2\x202\x20C\x3\x2\x2\x2\x203\x205\a,\x2\x2\x204\x206\a+\x2");
		sb.Append("\x2\x205\x204\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x20C\x3");
		sb.Append("\x2\x2\x2\x207\x209\a.\x2\x2\x208\x20A\a+\x2\x2\x209\x208\x3");
		sb.Append("\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20C\x3\x2\x2\x2\x20B\x1FF");
		sb.Append("\x3\x2\x2\x2\x20B\x203\x3\x2\x2\x2\x20B\x207\x3\x2\x2\x2\x20C");
		sb.Append("g\x3\x2\x2\x2\x20D\x217\x5v<\x2\x20E\x217\x5x=\x2\x20F\x217");
		sb.Append("\a\x4\x2\x2\x210\x217\x5l\x37\x2\x211\x217\a\x5\x2\x2\x212\x214");
		sb.Append("\a\x32\x2\x2\x213\x215\x5z>\x2\x214\x213\x3\x2\x2\x2\x214\x215");
		sb.Append("\x3\x2\x2\x2\x215\x217\x3\x2\x2\x2\x216\x20D\x3\x2\x2\x2\x216");
		sb.Append("\x20E\x3\x2\x2\x2\x216\x20F\x3\x2\x2\x2\x216\x210\x3\x2\x2\x2");
		sb.Append("\x216\x211\x3\x2\x2\x2\x216\x212\x3\x2\x2\x2\x217i\x3\x2\x2");
		sb.Append("\x2\x218\x221\x5v<\x2\x219\x221\x5x=\x2\x21A\x221\x5t;\x2\x21B");
		sb.Append("\x221\x5l\x37\x2\x21C\x21E\a\x32\x2\x2\x21D\x21F\x5z>\x2\x21E");
		sb.Append("\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x221\x3\x2\x2\x2");
		sb.Append("\x220\x218\x3\x2\x2\x2\x220\x219\x3\x2\x2\x2\x220\x21A\x3\x2");
		sb.Append("\x2\x2\x220\x21B\x3\x2\x2\x2\x220\x21C\x3\x2\x2\x2\x221k\x3");
		sb.Append("\x2\x2\x2\x222\x223\a\x35\x2\x2\x223\x227\x5p\x39\x2\x224\x225");
		sb.Append("\a\x35\x2\x2\x225\x227\x5n\x38\x2\x226\x222\x3\x2\x2\x2\x226");
		sb.Append("\x224\x3\x2\x2\x2\x227m\x3\x2\x2\x2\x228\x229\a#\x2\x2\x229");
		sb.Append("\x22E\x5p\x39\x2\x22A\x22B\a/\x2\x2\x22B\x22D\x5p\x39\x2\x22C");
		sb.Append("\x22A\x3\x2\x2\x2\x22D\x230\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2");
		sb.Append("\x22E\x22F\x3\x2\x2\x2\x22F\x231\x3\x2\x2\x2\x230\x22E\x3\x2");
		sb.Append("\x2\x2\x231\x232\a$\x2\x2\x232o\x3\x2\x2\x2\x233\x235\a\x3\x2");
		sb.Append("\x2\x234\x236\x5z>\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2");
		sb.Append("\x2\x2\x236\x23E\x3\x2\x2\x2\x237\x239\a\n\x2\x2\x238\x23A\x5");
		sb.Append("z>\x2\x239\x238\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23E");
		sb.Append("\x3\x2\x2\x2\x23B\x23E\x5v<\x2\x23C\x23E\a\x5\x2\x2\x23D\x233");
		sb.Append("\x3\x2\x2\x2\x23D\x237\x3\x2\x2\x2\x23D\x23B\x3\x2\x2\x2\x23D");
		sb.Append("\x23C\x3\x2\x2\x2\x23Eq\x3\x2\x2\x2\x23F\x24A\a#\x2\x2\x240");
		sb.Append("\x242\x5\b\x5\x2\x241\x240\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2");
		sb.Append("\x242\x246\x3\x2\x2\x2\x243\x245\x5\x36\x1C\x2\x244\x243\x3");
		sb.Append("\x2\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x246\x247");
		sb.Append("\x3\x2\x2\x2\x247\x249\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249");
		sb.Append("\x24B\a\x1F\x2\x2\x24A\x241\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2");
		sb.Append("\x24B\x24C\x3\x2\x2\x2\x24C\x24D\x5Z.\x2\x24D\x24E\a$\x2\x2");
		sb.Append("\x24Es\x3\x2\x2\x2\x24F\x251\a\x4\x2\x2\x250\x252\x5\x1E\x10");
		sb.Append("\x2\x251\x250\x3\x2\x2\x2\x251\x252\x3\x2\x2\x2\x252\x254\x3");
		sb.Append("\x2\x2\x2\x253\x255\x5z>\x2\x254\x253\x3\x2\x2\x2\x254\x255");
		sb.Append("\x3\x2\x2\x2\x255u\x3\x2\x2\x2\x256\x257\a\n\x2\x2\x257\x258");
		sb.Append("\a\x31\x2\x2\x258\x259\a\n\x2\x2\x259w\x3\x2\x2\x2\x25A\x25C");
		sb.Append("\a\x3\x2\x2\x25B\x25D\x5z>\x2\x25C\x25B\x3\x2\x2\x2\x25C\x25D");
		sb.Append("\x3\x2\x2\x2\x25D\x263\x3\x2\x2\x2\x25E\x260\a\n\x2\x2\x25F");
		sb.Append("\x261\x5z>\x2\x260\x25F\x3\x2\x2\x2\x260\x261\x3\x2\x2\x2\x261");
		sb.Append("\x263\x3\x2\x2\x2\x262\x25A\x3\x2\x2\x2\x262\x25E\x3\x2\x2\x2");
		sb.Append("\x263y\x3\x2\x2\x2\x264\x265\a(\x2\x2\x265\x26A\x5|?\x2\x266");
		sb.Append("\x267\a!\x2\x2\x267\x269\x5|?\x2\x268\x266\x3\x2\x2\x2\x269");
		sb.Append("\x26C\x3\x2\x2\x2\x26A\x268\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2");
		sb.Append("\x26B\x26D\x3\x2\x2\x2\x26C\x26A\x3\x2\x2\x2\x26D\x26E\a)\x2");
		sb.Append("\x2\x26E{\x3\x2\x2\x2\x26F\x277\x5~@\x2\x270\x271\x5~@\x2\x271");
		sb.Append("\x274\a*\x2\x2\x272\x275\x5~@\x2\x273\x275\a\n\x2\x2\x274\x272");
		sb.Append("\x3\x2\x2\x2\x274\x273\x3\x2\x2\x2\x275\x277\x3\x2\x2\x2\x276");
		sb.Append("\x26F\x3\x2\x2\x2\x276\x270\x3\x2\x2\x2\x277}\x3\x2\x2\x2\x278");
		sb.Append("\x279\t\x4\x2\x2\x279\x7F\x3\x2\x2\x2W\x81\x89\x90\x9A\xA1\xAA");
		sb.Append("\xB8\xBE\xC6\xD0\xD5\xDC\xE5\xE9\xEF\xF7\xFD\x106\x111\x117");
		sb.Append("\x11C\x11F\x122\x126\x129\x12C\x12F\x134\x13F\x143\x14E\x159");
		sb.Append("\x166\x171\x177\x17A\x17D\x18B\x190\x193\x198\x19C\x1A0\x1A4");
		sb.Append("\x1A8\x1AA\x1B0\x1BC\x1C5\x1C9\x1CD\x1D4\x1D8\x1DD\x1E0\x1E5");
		sb.Append("\x1EA\x1EF\x1F1\x1F7\x1FB\x201\x205\x209\x20B\x214\x216\x21E");
		sb.Append("\x220\x226\x22E\x235\x239\x23D\x241\x246\x24A\x251\x254\x25C");
		sb.Append("\x260\x262\x26A\x274\x276");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
